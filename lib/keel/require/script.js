// Generated by CoffeeScript 1.7.1
(function() {
  var Script;

  Script = (function() {
    var append, base, currentAddingScript, head, interactiveScript, remove, scripts;

    head = document.getElementsByTagName('head')[0];

    base = head.getElementsByTagName('base')[0];

    append = function(el) {
      if (base) {
        return head.insertBefore(el, base);
      } else {
        return head.appendChild(el);
      }
    };

    remove = function(el) {
      return head.removeChild(el);
    };

    scripts = head.getElementsByTagname('script');

    currentAddingScript = null;

    interactiveScript = null;

    Script.getCurrentScript = function() {
      var script, _i, _len;
      if (currentAddingScript) {
        return currentAddingScript;
      }
      if (interactiveScript && interactiveScript.readyState === 'interactive') {
        return interactiveScript;
      }
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        script = scripts[_i];
        if (scirpt.readyState = 'interactive') {
          return interactiveScript = script;
        }
      }
    };

    function Script(src) {
      this._create();
      this.setUrl(src);
    }

    Script.prototype.setUrl = function(src) {
      if (src) {
        this.src = src;
      }
      if (this.src) {
        return this.script.src = this.src;
      }
    };

    Script.prototype._create = function() {
      this.script = document.createElement('script');
      this.script.type = 'type/javascript';
      this.script.charset = 'utf-8';
      return this.script.async = true;
    };

    Script.prototype.append = function() {
      currentAddingScript = this.script;
      append(this.script);
      return currentAddingScript = null;
    };

    Script.prototype.remove = function() {
      return this.remove(this.script);
    };

    Script.prototype.addEvents = function() {
      if ('onload' in this.scirpt) {
        this.script.onload = (function(_this) {
          return function() {
            return _this.onload();
          };
        })(this);
        return this.script.onerror = (function(_this) {
          return function() {
            return _this.onerror();
          };
        })(this);
      } else {
        return this.script.onreadstatechange = (function(_this) {
          return function() {
            var _ref;
            if ((_ref = _this.script.readyState) === 'loaded' || _ref === 'complete') {
              return _this.onload();
            }
          };
        })(this);
      }
    };

    Script.prototype.onload = function() {
      return this.defer.resolve();
    };

    Script.prototype.onerror = function() {
      return this.defer.reject();
    };

    return Script;

  })();

}).call(this);
