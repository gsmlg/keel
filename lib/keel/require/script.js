// Generated by CoffeeScript 1.7.1
var Script, promise;

promise = require('./promise');

Script = (function() {
  var append, base, currentAddingScript, head, interactiveScript, remove, scripts;

  head = document.getElementsByTagName('head')[0];

  base = head.getElementsByTagName('base')[0];

  append = function(el) {
    if (base) {
      return head.insertBefore(el, base);
    } else {
      return head.appendChild(el);
    }
  };

  remove = function(el) {
    return head.removeChild(el);
  };

  scripts = head.getElementsByTagName('script');

  currentAddingScript = null;

  interactiveScript = null;

  Script.DEBUG = true;

  Script.getCurrentScript = function() {
    var script, _i, _len;
    if (currentAddingScript) {
      return currentAddingScript;
    }
    if (interactiveScript && interactiveScript.readyState === 'interactive') {
      return interactiveScript;
    }
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (script.readyState = 'interactive') {
        return interactiveScript = script;
      }
    }
  };

  function Script(src) {
    this._create();
    this.setUrl(src);
    this.deferred = promise.defer();
  }

  Script.prototype.setUrl = function(src) {
    if (src) {
      this.src = src;
    }
    if (this.src) {
      return this.script.src = this.src;
    }
  };

  Script.prototype._create = function() {
    this.script = document.createElement('script');
    this.script.type = 'text/javascript';
    this.script.charset = 'utf-8';
    return this.script.async = 'async';
  };

  Script.prototype.append = function() {
    this.addEvents();
    currentAddingScript = this.script;
    append(this.script);
    return currentAddingScript = null;
  };

  Script.prototype.remove = function() {
    return remove(this.script);
  };

  Script.prototype.addEvents = function() {
    if ('onload' in this.script) {
      this.script.onload = (function(_this) {
        return function() {
          return _this.onload();
        };
      })(this);
      return this.script.onerror = (function(_this) {
        return function() {
          return _this.onerror();
        };
      })(this);
    } else {
      return this.script.onreadystatechange = (function(_this) {
        return function() {
          var _ref;
          if ((_ref = _this.script.readyState) === 'loaded' || _ref === 'complete') {
            return _this.onload();
          }
        };
      })(this);
    }
  };

  Script.prototype.clearEvents = function() {
    return this.script.onload = this.script.onerror = this.script.onreadystatechange = null;
  };

  Script.prototype.onload = function() {
    this.deferred.resolve(this);
    this.clearEvents();
    if (!Script.DEBUG) {
      return this.remove();
    }
  };

  Script.prototype.onerror = function() {
    this.deferred.reject(this);
    this.clearEvents();
    if (!Script.DEBUG) {
      return this.remove();
    }
  };

  Script.prototype.then = function(done, fail) {
    return this.deferred.promise.then(done, fail);
  };

  return Script;

})();

module.exports = Script;
