// Generated by CoffeeScript 1.7.1
var Callback, Deferred, Promise,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

Callback = (function() {
  function Callback() {
    this.callbacks = [];
    this.beCalled = [];
    this.rest = [];
  }

  Callback.prototype.apply = function(args) {
    var callback, result, _i, _len, _ref;
    _ref = this.callbacks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      if (!(__indexOf.call(this.beCalled, callback) < 0)) {
        continue;
      }
      result = callback.apply(null, args);
      this.beCalled.push(callback);
      this.rest.push({
        callback: callback,
        result: result
      });
    }
    this.hasBeenCalled = true;
    this.callWith = args;
    return this;
  };

  Callback.prototype.call = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.apply(args);
  };

  Callback.prototype.add = function(callback) {
    if (__indexOf.call(this.callbacks, callback) < 0) {
      this.callbacks.push(callback);
    }
    if (this.hasBeenCalled) {
      this.apply(this.callWith);
    }
    return this;
  };

  return Callback;

})();

Deferred = (function() {
  function Deferred() {
    this.promise = new Promise();
  }

  Deferred.prototype.resolve = function(result) {
    if (!(this.promise.isFulfilled || this.promise.isRejcted)) {
      this.promise.fulfill.call(result);
      return this.promise.isFulfilled = true;
    }
  };

  Deferred.prototype.reject = function(result) {
    if (!(this.promise.isFulfilled || this.promise.isRejcted)) {
      this.promise.reject.call(result);
      return this.promise.isRejected = true;
    }
  };

  return Deferred;

})();

Promise = (function() {
  function Promise() {
    this.fulfill = new Callback();
    this.reject = new Callback();
    this.isFulfilled = false;
    this.isRejected = false;
  }

  Promise.prototype.then = function(onFulfilled, onRejected) {
    var def;
    def = new Deferred();
    this.fulfill.add((function(_this) {
      return function(res) {
        var rest;
        if (onFulfilled != null) {
          rest = onFulfilled(res);
        }
        if ((rest != null) && rest instanceof Promise) {
          return rest.then((function(res) {
            return def.resolve(res);
          }), (function(res) {
            return def.reject(res);
          }));
        } else {
          return def.resolve(rest);
        }
      };
    })(this));
    this.reject.add(function(res) {
      var rest;
      if (onRejected != null) {
        rest = onRejected(res);
      }
      if ((rest != null) && rest instanceof Promise) {
        return rest.then((function(res) {
          return def.resolve(res);
        }), (function(res) {
          return def.reject(res);
        }));
      } else {
        return def.reject(rest);
      }
    });
    return def.promise;
  };

  return Promise;

})();

exports.defer = function() {
  return new Deferred;
};
