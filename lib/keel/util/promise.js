// Generated by CoffeeScript 1.7.1
(function() {
  var Deferred, Promise,
    __slice = [].slice;

  Deferred = (function() {
    function Deferred() {
      this.promise = new Promise;
    }

    Deferred.prototype.resolve = function() {
      var args, cb, result;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      cb = this.promise.fulfill.shift;
      if (cb) {
        return result = cb.apply(null, args);
      }
    };

    Deferred.prototype.reject = function() {
      var args, cb, result;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      cb = this.promise.reject.shift;
      if (cb) {
        return result = cb.apply(null, args);
      }
    };

    return Deferred;

  })();

  Promise = (function() {
    function Promise() {
      this.promise = this;
      this.fulfill = [];
      this.reject = [];
    }

    Promise.prototype._addFulfill = function(cb) {
      return this.fulfile.push(cb);
    };

    Promise.prototype._addReject = function(cb) {
      return this.reject.push(cb);
    };

    Promise.prototype.then = function(onFulfilled, onRejcted) {
      if (onFulfilled) {
        this.addFulfill(onFulfilled);
      }
      if (onRejected) {
        this.addReject(onRejected);
      }
      return this;
    };

    Promise.prototype["catch"] = function(callback) {};

    return Promise;

  })();

}).call(this);
